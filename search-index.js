var N=null,E="",T="t",U="u",searchIndex={};
var R=["compress","decompress","total_in","Total number of bytes processed as input","total_out","Total number of bytes processed as output","compression","get_ref","Acquires a reference to the underlying stream","get_mut","Acquires a mutable reference to the underlying stream","into_inner","Returns the number of bytes that the decompressor has…","BzEncoder","BzDecoder","bzencoder","Returns the number of bytes produced by the compressor…","Returns the number of bytes consumed by the compressor…","bzdecoder","Unwrap the underlying writer, finishing the compression…","Create a new compression stream which will compress at the…","Acquires a reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","try_finish","Attempt to finish this output stream, writing out final…","Returns the number of bytes consumed by the decompressor…","result","try_from","borrow_mut","try_into","type_id","to_owned","clone_into","borrow","typeid","bzip2::bufread","bzip2::read","bzip2::write","formatter","Compress","Decompress","Compression","bzip2_sys","bz_stream"];
searchIndex["bzip2"]={"doc":"Bzip compression for Rust","i":[[3,R[39],"bzip2","Representation of an in-memory compression stream.",N,N],[3,R[40],E,"Representation of an in-memory decompression stream.",N,N],[3,R[41],E,"When compressing data, the compression level can be…",N,N],[4,"Action",E,"Possible actions to take on compression.",N,N],[13,"Run",E,"Normal compression.",0,N],[13,"Flush",E,"Request that the current compression block is terminate.",0,N],[13,"Finish",E,"Request that the compression stream be finalized.",0,N],[4,"Status",E,"Result of compression or decompression",N,N],[13,"Ok",E,"Decompression went fine, nothing much to report.",1,N],[13,"FlushOk",E,"The Flush action on a compression went ok.",1,N],[13,"RunOk",E,"THe Run action on compression went ok.",1,N],[13,"FinishOk",E,"The Finish action on compression went ok.",1,N],[13,"StreamEnd",E,"The stream's end has been met, meaning that no more data…",1,N],[13,"MemNeeded",E,"There was insufficient memory in the input or output…",1,N],[4,"Error",E,"Fatal errors encountered when compressing/decompressing…",N,N],[13,"Sequence",E,"The sequence of operations called on a…",2,N],[13,"Data",E,"The data being decompressed was invalid, or it was not a…",2,N],[13,"DataMagic",E,"The magic bz2 header wasn't present when decompressing.",2,N],[13,"Param",E,"The parameters to this function were invalid.",2,N],[11,"new",E,"Creates a new stream prepared for compression.",3,[[[R[6]],["u32"]],[R[0]]]],[11,R[0],E,"Compress a block of input into a block of output.",3,N],[11,"compress_vec",E,"Compress a block of input into an output vector.",3,N],[11,R[2],E,R[3],3,[[["self"]],["u64"]]],[11,R[4],E,R[5],3,[[["self"]],["u64"]]],[11,"new",E,"Creates a new stream prepared for decompression.",4,[[["bool"]],[R[1]]]],[11,R[1],E,"Decompress a block of input into a block of output.",4,N],[11,"decompress_vec",E,"Decompress a block of input into an output vector.",4,N],[11,R[2],E,R[3],4,[[["self"]],["u64"]]],[11,R[4],E,R[5],4,[[["self"]],["u64"]]],[0,"bufread",E,"I/O streams for wrapping `BufRead` types as…",N,N],[3,R[13],R[35],"A bz2 encoder, or compressor.",N,N],[3,R[14],E,"A bz2 decoder, or decompressor.",N,N],[11,"new",E,"Creates a new encoder which will read uncompressed data…",5,[[["r"],[R[6]]],[R[15]]]],[11,R[7],E,R[8],5,[[["self"]],["r"]]],[11,R[9],E,R[10],5,[[["self"]],["r"]]],[11,R[11],E,"Consumes this encoder, returning the underlying reader.",5,[[["self"]],["r"]]],[11,R[4],E,R[16],5,[[["self"]],["u64"]]],[11,R[2],E,R[17],5,[[["self"]],["u64"]]],[11,"new",E,"Creates a new decoder which will decompress data read from…",6,[[["r"]],[R[18]]]],[11,R[7],E,R[8],6,[[["self"]],["r"]]],[11,R[9],E,R[10],6,[[["self"]],["r"]]],[11,R[11],E,"Consumes this decoder, returning the underlying reader.",6,[[["self"]],["r"]]],[11,R[2],E,R[12],6,[[["self"]],["u64"]]],[11,R[4],E,R[12],6,[[["self"]],["u64"]]],[0,"read","bzip2","Reader-based compression/decompression streams",N,N],[3,R[13],R[36],"A compression stream which wraps an uncompressed stream of…",N,N],[3,R[14],E,"A decompression stream which wraps a compressed stream of…",N,N],[11,"new",E,R[20],7,[[["r"],[R[6]]],[R[15]]]],[11,R[7],E,R[8],7,[[["self"]],["r"]]],[11,R[9],E,R[10],7,[[["self"]],["r"]]],[11,R[11],E,R[19],7,[[["self"]],["r"]]],[11,R[4],E,R[16],7,[[["self"]],["u64"]]],[11,R[2],E,R[17],7,[[["self"]],["u64"]]],[11,"new",E,"Create a new decompression stream, which will read…",8,[[["r"]],[R[18]]]],[11,R[7],E,R[8],8,[[["self"]],["r"]]],[11,R[9],E,R[10],8,[[["self"]],["r"]]],[11,R[11],E,R[19],8,[[["self"]],["r"]]],[11,R[4],E,"Returns the number of bytes produced by the decompressor…",8,[[["self"]],["u64"]]],[11,R[2],E,R[25],8,[[["self"]],["u64"]]],[0,"write","bzip2","Writer-based compression/decompression streams",N,N],[3,R[13],R[37],"A compression stream which will have uncompressed data…",N,N],[3,R[14],E,"A compression stream which will have compressed data…",N,N],[11,"new",E,R[20],9,[[["w"],[R[6]]],[R[15]]]],[11,R[7],E,R[21],9,[[["self"]],["w"]]],[11,R[9],E,R[22],9,[[["self"]],["w"]]],[11,R[23],E,R[24],9,[[["self"]],[R[26]]]],[11,"finish",E,"Consumes this encoder, flushing the output stream.",9,[[["self"]],[R[26]]]],[11,R[4],E,"Returns the number of bytes produced by the compressor",9,[[["self"]],["u64"]]],[11,R[2],E,R[17],9,[[["self"]],["u64"]]],[11,"new",E,"Create a new decoding stream which will decompress all…",10,[[["w"]],[R[18]]]],[11,R[7],E,R[21],10,[[["self"]],["w"]]],[11,R[9],E,R[22],10,[[["self"]],["w"]]],[11,R[23],E,R[24],10,[[["self"]],[R[26]]]],[11,"finish",E,R[19],10,[[["self"]],[R[26]]]],[11,R[4],E,"Returns the number of bytes produced by the decompressor",10,[[["self"]],["u64"]]],[11,R[2],E,R[25],10,[[["self"]],["u64"]]],[11,"new","bzip2","Create a new compression spec with a specific numeric…",11,[[["u32"]],[R[6]]]],[11,"none",E,"Do not compress.",11,[[],[R[6]]]],[11,"fast",E,"Optimize for the best speed of encoding.",11,[[],[R[6]]]],[11,"best",E,"Optimize for the size of data being encoded.",11,[[],[R[6]]]],[11,"level",E,"Return the compression level as an integer.",11,[[["self"]],["u32"]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[27],E,E,3,[[[U]],[R[26]]]],[11,R[33],E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,[[["self"]],[R[34]]]],[11,R[28],E,E,3,[[["self"]],[T]]],[11,R[29],E,E,3,[[["self"]],[R[26]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[27],E,E,4,[[[U]],[R[26]]]],[11,R[33],E,E,4,[[["self"]],[T]]],[11,R[30],E,E,4,[[["self"]],[R[34]]]],[11,R[28],E,E,4,[[["self"]],[T]]],[11,R[29],E,E,4,[[["self"]],[R[26]]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[31],E,E,11,[[["self"]],[T]]],[11,R[32],E,E,11,N],[11,"from",E,E,11,[[[T]],[T]]],[11,R[27],E,E,11,[[[U]],[R[26]]]],[11,R[33],E,E,11,[[["self"]],[T]]],[11,R[30],E,E,11,[[["self"]],[R[34]]]],[11,R[28],E,E,11,[[["self"]],[T]]],[11,R[29],E,E,11,[[["self"]],[R[26]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[31],E,E,0,[[["self"]],[T]]],[11,R[32],E,E,0,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[27],E,E,0,[[[U]],[R[26]]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"]],[R[34]]]],[11,R[28],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[["self"]],[R[26]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[31],E,E,1,[[["self"]],[T]]],[11,R[32],E,E,1,N],[11,"from",E,E,1,[[[T]],[T]]],[11,R[27],E,E,1,[[[U]],[R[26]]]],[11,R[33],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"]],[R[34]]]],[11,R[28],E,E,1,[[["self"]],[T]]],[11,R[29],E,E,1,[[["self"]],[R[26]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[31],E,E,2,[[["self"]],[T]]],[11,R[32],E,E,2,N],[11,"to_string",E,E,2,[[["self"]],["string"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[27],E,E,2,[[[U]],[R[26]]]],[11,R[33],E,E,2,[[["self"]],[T]]],[11,R[30],E,E,2,[[["self"]],[R[34]]]],[11,R[28],E,E,2,[[["self"]],[T]]],[11,R[29],E,E,2,[[["self"]],[R[26]]]],[11,"into",R[35],E,5,[[["self"]],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[27],E,E,5,[[[U]],[R[26]]]],[11,R[33],E,E,5,[[["self"]],[T]]],[11,R[30],E,E,5,[[["self"]],[R[34]]]],[11,R[28],E,E,5,[[["self"]],[T]]],[11,R[29],E,E,5,[[["self"]],[R[26]]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[27],E,E,6,[[[U]],[R[26]]]],[11,R[33],E,E,6,[[["self"]],[T]]],[11,R[30],E,E,6,[[["self"]],[R[34]]]],[11,R[28],E,E,6,[[["self"]],[T]]],[11,R[29],E,E,6,[[["self"]],[R[26]]]],[11,"into",R[36],E,7,[[["self"]],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[27],E,E,7,[[[U]],[R[26]]]],[11,R[33],E,E,7,[[["self"]],[T]]],[11,R[30],E,E,7,[[["self"]],[R[34]]]],[11,R[28],E,E,7,[[["self"]],[T]]],[11,R[29],E,E,7,[[["self"]],[R[26]]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[27],E,E,8,[[[U]],[R[26]]]],[11,R[33],E,E,8,[[["self"]],[T]]],[11,R[30],E,E,8,[[["self"]],[R[34]]]],[11,R[28],E,E,8,[[["self"]],[T]]],[11,R[29],E,E,8,[[["self"]],[R[26]]]],[11,"into",R[37],E,9,[[["self"]],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[27],E,E,9,[[[U]],[R[26]]]],[11,R[33],E,E,9,[[["self"]],[T]]],[11,R[30],E,E,9,[[["self"]],[R[34]]]],[11,R[28],E,E,9,[[["self"]],[T]]],[11,R[29],E,E,9,[[["self"]],[R[26]]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[27],E,E,10,[[[U]],[R[26]]]],[11,R[33],E,E,10,[[["self"]],[T]]],[11,R[30],E,E,10,[[["self"]],[R[34]]]],[11,R[28],E,E,10,[[["self"]],[T]]],[11,R[29],E,E,10,[[["self"]],[R[26]]]],[11,"drop",E,E,9,[[["self"]]]],[11,"drop",E,E,10,[[["self"]]]],[11,"eq","bzip2",E,0,[[["self"],["action"]],["bool"]]],[11,"eq",E,E,1,[[["self"],["status"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["error"]],["bool"]]],[11,"default",E,"Choose the default compression, a balance between speed…",11,[[],[R[6]]]],[11,"clone",E,E,0,[[["self"]],["action"]]],[11,"clone",E,E,1,[[["self"]],["status"]]],[11,"clone",E,E,2,[[["self"]],["error"]]],[11,"clone",E,E,11,[[["self"]],[R[6]]]],[11,"fmt",E,E,2,[[["self"],[R[38]]],[R[26]]]],[11,"fmt",E,E,0,[[["self"],[R[38]]],[R[26]]]],[11,"fmt",E,E,1,[[["self"],[R[38]]],[R[26]]]],[11,"fmt",E,E,2,[[["self"],[R[38]]],[R[26]]]],[11,"fmt",E,E,11,[[["self"],[R[38]]],[R[26]]]],[11,"read",R[35],E,5,N],[11,"read",E,E,6,N],[11,"read",R[36],E,7,N],[11,"read",E,E,8,N],[11,"read",R[37],E,9,N],[11,"read",E,E,10,N],[11,"write",R[35],E,5,N],[11,"flush",E,E,5,[[["self"]],[R[26]]]],[11,"write",E,E,6,N],[11,"flush",E,E,6,[[["self"]],[R[26]]]],[11,"write",R[36],E,7,N],[11,"flush",E,E,7,[[["self"]],[R[26]]]],[11,"write",E,E,8,N],[11,"flush",E,E,8,[[["self"]],[R[26]]]],[11,"write",R[37],E,9,N],[11,"flush",E,E,9,[[["self"]],[R[26]]]],[11,"write",E,E,10,N],[11,"flush",E,E,10,[[["self"]],[R[26]]]],[11,"description","bzip2",E,2,[[["self"]],["str"]]]],"p":[[4,"Action"],[4,"Status"],[4,"Error"],[3,R[39]],[3,R[40]],[3,R[13]],[3,R[14]],[3,R[13]],[3,R[14]],[3,R[13]],[3,R[14]],[3,R[41]]]};
searchIndex[R[42]]={"doc":E,"i":[[3,R[43],R[42],E,N,N],[12,"next_in",E,E,0,N],[12,"avail_in",E,E,0,N],[12,"total_in_lo32",E,E,0,N],[12,"total_in_hi32",E,E,0,N],[12,"next_out",E,E,0,N],[12,"avail_out",E,E,0,N],[12,"total_out_lo32",E,E,0,N],[12,"total_out_hi32",E,E,0,N],[12,"state",E,E,0,N],[12,"bzalloc",E,E,0,N],[12,"bzfree",E,E,0,N],[12,"opaque",E,E,0,N],[5,"bz_internal_error",E,E,N,[[["c_int"]]]],[5,"BZ2_bzCompressInit",E,E,N,N],[5,"BZ2_bzCompress",E,E,N,N],[5,"BZ2_bzCompressEnd",E,E,N,N],[5,"BZ2_bzDecompressInit",E,E,N,N],[5,"BZ2_bzDecompress",E,E,N,N],[5,"BZ2_bzDecompressEnd",E,E,N,N],[17,"BZ_RUN",E,E,N,N],[17,"BZ_FLUSH",E,E,N,N],[17,"BZ_FINISH",E,E,N,N],[17,"BZ_OK",E,E,N,N],[17,"BZ_RUN_OK",E,E,N,N],[17,"BZ_FLUSH_OK",E,E,N,N],[17,"BZ_FINISH_OK",E,E,N,N],[17,"BZ_STREAM_END",E,E,N,N],[17,"BZ_SEQUENCE_ERROR",E,E,N,N],[17,"BZ_PARAM_ERROR",E,E,N,N],[17,"BZ_MEM_ERROR",E,E,N,N],[17,"BZ_DATA_ERROR",E,E,N,N],[17,"BZ_DATA_ERROR_MAGIC",E,E,N,N],[17,"BZ_IO_ERROR",E,E,N,N],[17,"BZ_UNEXPECTED_EOF",E,E,N,N],[17,"BZ_OUTBUFF_FULL",E,E,N,N],[17,"BZ_CONFIG_ERROR",E,E,N,N],[11,"into",E,E,0,[[["self"]],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[27],E,E,0,[[[U]],[R[26]]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"]],[R[34]]]],[11,R[28],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[["self"]],[R[26]]]]],"p":[[3,R[43]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);